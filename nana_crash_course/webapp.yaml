# Deployment & Service
# Metadata & Status & Spec (Status is generated by K8s and compared with Spec)
apiVersion: apps/v1
# To scale we should use stateful set
kind: Deployment
metadata:
  name: webapp-deployment
  namespace: my-namespace
  labels:
    app: webapp
spec:
  # How many ports to be created
  replicas: 1
  # Which ports belong to which deployment identified using matchLabels
  selector:
    matchLabels:
      app: webapp
  # Blueprint for pods
  template:
    metadata:
      # All pods will have the same label
      labels:
        app: webapp
    spec:
      containers:
        - name: webapp
          image: nanajanashia/k8s-demo-app:v1.0
          ports:
            - containerPort: 3000
          env:
            # To login into MongoDB
            - name: USER_NAME
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-user
            - name: USER_PWD
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-password
            # Indicate URL to mongoDB
            - name: DB_URL
              valueFrom:
                configMapKeyRef:
                  name: mongo-config
                  key: mongo-url
---
# Service - expose an application running on a set of Pods as a network service
apiVersion: v1
kind: Service
metadata:
  name: webapp-service
  namespace: my-namespace # Good to group all container in 1 namespace - can't interact between different namespace
spec:
  # Set to be external service - request is directly forwarded without Ingress
  type: NodePort # ClusterIP by default (internal service)
  # service will forward request to the port with the selector label
  # should match the label of the pods
  selector:
    app: webapp
  # external traffic directed from nodePort (user to ingress) to port (ingress to service) to targetport (service to deployment)
  ports:
    - protocol: TCP
      # External request will be channeled through this port
      port: 3000
      # targetPort should be same as containerPort
      targetPort: 3000
      # exposes the service on each Node'IP at a static port
      # Range is between 30000 - 32767
      nodePort: 30100
