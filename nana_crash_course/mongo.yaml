# Deployment & Service
# Metadata & Status & Spec (Status is generated by K8s and compared with Spec)
apiVersion: apps/v1
# To scale we should use stateful set
kind: Deployment
metadata:
  name: mongo-deployment
  namespace: my-namespace
  labels:
    app: mongo
spec:
  # How many ports to be created
  replicas: 1
  # Which ports belong to which deployment identified using matchLabels
  selector:
    matchLabels:
      app: mongo
  # Blueprint for pods
  template:
    metadata:
      # All pods will have the same label
      labels:
        app: mongo
    spec:
      containers:
        - name: mongodb
          image: mongo:5.0
          ports:
            - containerPort: 27017
          # Pass SecretMap or ConfigMap value
          env:
            # To create user account and password
            - name: MONGO_INITDB_ROOT_USERNAME
              # value: mongouser
              # Reference from SecretMap
              valueFrom:
                secretKeyRef:
                  name: mongo-secret # check metadata name
                  key: mongo-user
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-secret # check metadata name
                  key: mongo-password
---
# Service - expose an application running on a set of Pods as a network service
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
  namespace: my-namespace
spec:
  # service will forward request to the port with the selector label
  # should match the label of the pods
  selector:
    app: mongo
  ports:
    - protocol: TCP
      # External request will be channeled through this port
      port: 27017
      # targetPort should be same as containerPort
      targetPort: 27017